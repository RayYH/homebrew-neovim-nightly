name: Update neovim-nightly Cask (from template)

on:
  schedule:
    - cron: "*/10 * * * *"
  workflow_dispatch: {}

permissions:
  contents: write
  pull-requests: write

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install tools
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Run updater
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          chmod +x scripts/update_neovim_nightly.sh
          scripts/update_neovim_nightly.sh

      - name: Create PR
        id: cpr
        uses: peter-evans/create-pull-request@v6
        with:
          base: master
          branch: chore/update-neovim-nightly
          add-paths: |
            Casks/neovim-nightly.rb
          commit-message: "chore(cask): update neovim-nightly from template"
          title: "Update neovim-nightly Cask checksums"
          body: "Automated update of Casks/neovim-nightly.rb from tmpl/neovim-nightly.rb."
          delete-branch: true

      - name: Merge PR (squash) or enable auto-merge
        if: steps.cpr.outputs.pull-request-number
        uses: actions/github-script@v7
        with:
          script: |
            const pr = Number('${{ steps.cpr.outputs.pull-request-number }}');
            const owner = context.repo.owner;
            const repo  = context.repo.repo;

            // Try immediate merge (works if no blocking branch protections)
            try {
              await github.pulls.merge({
                owner, repo, pull_number: pr, merge_method: "squash"
              });
              core.info(`Merged PR #${pr}`);
            } catch (e) {
              core.warning(`Immediate merge failed: ${e.message}`);
              // Fallback: enable auto-merge so it completes once checks/reviews pass
              const { data: prInfo } = await github.pulls.get({ owner, repo, pull_number: pr });
              const mutation = `
                mutation EnableAutoMerge($pullRequestId: ID!, $mergeMethod: PullRequestMergeMethod!) {
                  enablePullRequestAutoMerge(input: { pullRequestId: $pullRequestId, mergeMethod: $mergeMethod }) {
                    clientMutationId
                  }
                }`;
              await github.graphql(mutation, {
                pullRequestId: prInfo.node_id,
                mergeMethod: "SQUASH",
                headers: { authorization: `token ${{ secrets.GITHUB_TOKEN }}` }
              });
              core.info(`Enabled auto-merge for PR #${pr}`);
            }